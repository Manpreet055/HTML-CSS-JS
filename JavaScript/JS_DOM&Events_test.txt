Section 1 : JS fundamentsals :

What is variable ?
    An variable is like a container which stores a value or we can say it refers to a value. we can define a variable and using that variable name we can use that value in anywhere in the until unless it does not define using "let" keyword :
    
    Syntax to declaring a variable :
    let variableName = value;

    Example :
    let number = 10;

    we can define diffrent types of data in variables.

    we can define a variable using Let ,const or var(older version before ES6+)

    var : it is a old method to define a variable it is a global scope variable means even if can define within a Function we can acess that variable from outside of the variable which is bad to build a secure program .

    Let : So we use let to define the variable means if they define for Example in a Function or in  if else or even if it is defined within loops the opertaion on that variable can only performed on that scope means we can define a variable with diffrent same name outside of that scope without affecting the other variable .

    const : it is used define a variable where the value of that variale cannot be changed .

    Cautions before declaring a variable :
    --we cannot use a number at the starting of the variable name or any speacial Character or anything like this .Example: _balance,myName_is etc.
    --we should define the variable name in camel case means the second word should be starts with capitale letter.Although it is not mandatory but almost all programmer use this pattern for declarig a variable.


What is data types ?
    Data types is type of data we define in a variable.There is to types of Data-types in JS :
    
    1:Primitive Data Types :
        Number : It can be a numeric value no matter it is a integer or a floating value 10,20 etc..
        string : It can be a Alphabatical value "Name","Age".we should define a string in double or single quotes "" or '' .
        BigInt: It is used to deal with big number like millions or billions etc.
        symbol : It is a refers to a speacial type of value. we can define this as : let value = Symbol(10);
        Boleen :Irue refers to 1 and false refers to 0.
        null : It is a data type where a variable does not hold a value.
        undefined  : It is data types where a value should be define in the future.
    
    2. Non-Primitive Data types :
        Array : An Array is define within square bracetts . we can define multiple types of data in a single
                Array and can store it in a single variable.Example of an Array.
                let arr = ["Manpreet",22,"Frontend Developer"];
                we can perform many opertaion on Array.
                1: Acessing the array value by its index number : arr[0];(Array index starts from Zero).
                2. Updates an array value by using its index number : arr [1] = 23;
                3. Etc.
        object :An object can also store multi types of data but in key value pairs . to acess the value of 
                an object we can acess to it by using its key .Example : 
                let obj = {
                    name : "Manpreet Singh",
                    Age : 22 ,
                    Job : "Frontend Developer"
                }
                we can define a string key with or without double or single quotes.
                 
                //how to acess an object value :

                console.log(obj.name);
                        or
                console.log("obj["name"]); // always prefer this because the key can be define in double quotes.

               //To update an value .
                
               obj.Age = 23 ; 

               there is a lot more objects methods in JS .
        Function: An Function is used to define a block of code in that situation where we have to use same lines of code multiple times .Syntax :

                function  functionName (parameters) {
                    // block of code 
                }

                Example : 
                function toAddNumbers (a,b){

                    return a+b ; // return is a keyword to return a value but we can acess to the value by printing the function .

                    //console.log(a+b); //we can also use this but it can execute immedietly after calling the function; which is not preferable until unless we have to do it .
                }
                // calling a function:
                console.log(toAddNumbers(5,10)); // Output : 15

What ia operators ?
    An operator is a like a symbol used to perform opertions on operand : Example : 
    a + b ; a and b is our operands and + is our operator.

    1.Arithmatic operator : These are the most basic methods used to perfrom mathematics operations on 
    operands like  +,-,*,/,% .
    2.Assignnment operator : it is a operator used to assign a value "=".
    3.Comparison operators : It is used to compare two or more value these are : >,<,<=,>=,== , ===(for strict Comparison) etc. 
    4.logical operators : these are And,OR ,NOT and their symbols are &,||,!
        1. And is used when both left and right value is true.
        2. OR is used when one (left or right) value is true .
        3. not is used when both value are false.
    5.Ternary operator : it is used to as a one liner if else statement .
    there is still more operators in JS .

What is Conditional statement ?
    Conditional statements are used in JS are :
    if-else : we can give a condtion in if block if the condtion is true the if block will be executed . 
    other wise the else block will executed . the else block is not mandatory to define we can skip the 
    else block to define . Syntax :
    if (condtion){
        //block of code 
    }else{
        //block of code
    }
    Example : 
    let a=10;
    let b=10;

    if(a>b){
        console.log("a is greater than b");
    }else if(a<b){
        console.log("b is greater than a");
    }else{
        console.log(""Both are equal);
    }

What is Loops ?
    Loops is used to repeat a single task until the condtion is true . when the condtion became false then our program will exit from the loop .Types of Loops
    :for loop: its is the most loop in JS most of the programmer use this.Example:
        for(let a = 1 ; a <=10 ;a++){
            console.log(a); // print number from one to ten 
        }

    :while loop: It is used to perform operations on already define variable , we can also do this with for 
    loop.Example : 
    let a=10;
    while(a<=10){
        console.log(a);
        a++; //increase the value of a after each iterations
    }   
    do-while loop :it is the most rarely used loop ,the block of loop is always execute once even if the condtion is false . after execute once it check the condtion if condtion is false then it will exit the loop. this is because th condtion is defined in the last of loop.

    do{
        console.log(a);
        a++;
    }while(a<=10);


Section 2 : Function call back and higher order function.

    //Function callbacks : it is refers to a trem that a function can be passed as an argument .
    Example :
    function addTwoNumber (a,b){
        a+b;
    }
    let arr =[10,20,30];
    let addition = arr.reduce((addTwoNumber){});

    //higher-order function : these are the function which use another function as a parameter and perform operations according to that callback function.
    These are :

    map():map is a function used to perfrom an operations on each element of array and store it in a new array.it iterate on each element just like for loop .For Example:
    let arr =[10,20,30,40];
    let newArr = arr.map((value){ return value+2}); // add 2 to each element of array

    filter(): filter is a function in JS which is used to filter some elements from the array . Example:
    let arr = [1,2,3,4,5,6,7,8,9,10];
    let evenNumbers = arr.filter((value) {if(value % 2 === 0){return value;}}) // filterout the even numbers.

    reduce : it take two arguments and perform return a single value .Example:

    let sumOfArr = arr.reduce((prev,curr){return prev + curr}); // return the sum of array elements.

    //IIFE (immedietly invoked function Expression) : this function automatically execute once and we cannot used it after.after the execution it become dead code until unless we execute our code again.Example:

    (function loadingScreen(){
        //block of code
    }(parameter))

    //closure : closure is refers to term that the nested function can acess the variables of outer function function . 
    let foreman = () =>{
        let material1= "MsPipe;
        let material2 = "MsTube ; 
        let worker= () =>{
            let infrastructure = material1 + material2 ;
            return infrastructure
        }
        return  worker;
    }


Section 3 : ES6+ concepts : ES stands for EcmaScript . the es6 concepts are introduced in 2015,and after they realease new features each and every years .

    1:Template literals : These are the the speacial type of string methods we can say used to add other  
    variable values in a string . it can define using `` instead of "" or '' ;
    let a = 10 ;
    console.log(`the value of a is : &{a}`); // the value of a is 10 ; 

    2:arrow function : these are the function used to declare a function in s variable it is also called fat arrow function:
    let arrowFunction = (parameter) => {
        //block of code
    };

    3. rest and spread operator : the rest operator is used assign values to variable of an array in the form of array .
    let arr = [10,20,30,40];
    let newArr[first,second,...rest] = arr ;// this ois also an example of destructring so i am skipping the destructring part .
    console.log(rest) // output // [30,40] 

    4. this keyword () : this keyword is pointing the value of constructor of an class.
        class Car {
            constructor(name,model){
                this.name = name ;
                this.model = model ;
            }
        }

        let newCar = new Car("toyota","hilux");

    5. OOPs in js  : Opps stands for object oriented programming : it has some advance level concepts like class, inheritnce ,polymorphism, encapsulation ,

    //class : class is the blueprint of an objects class can have multiple function which is called as methods in OOPs. for example :
    class Car {                 "Car" is the name of the class.
            constructor(name,model){ // it runs always when an object is created
                this.name = name ;
                this.model = model ;
            }
        }

        let newCar = new Car("toyota","hilux"); // object/instance is created . 
    
    //inheritnce:a class can inheriates the properties of another class and can also have additional features:
    class Car {
            constructor(name,model){
                this.name = name ;
                this.model = model ;
            }
        }

        let newCar = new Car("toyota","hilux");

    class EV extends Car {
        constructor(name,model){
                this.name = name ;
                this.model = model ;
            }
    }    

    // polymorphism : poly means multiple morphos means forms : it means that a method can has multiple forms . 
        method Overriddind and method overloading is the concepts of polymorphism/.

    // encapsulation : it refers to that hide unwanted data from outside of the world can only display necessary info to the end user . concepts of encapsulation is 
        acess modifiers : 
            public private and protected.

    // abstrcation is used by making an private method which can only acessable by the methods inside the class but we cannot call that method outside if the class.        

Section 4 : DOM manipulation (important)
    Dom is stands for (document object model). it is a tree like structure of HTML code . where the whole code i
    is called document and we can imagine it as a tree and each element like div,p,etc, or classed and id names is called node we can imagine it as leaves or fruits etc. now imagine we are the garderner who modify that tree(document(DOM)) and make it look beautiful and this process is called DOM manipulation . 

    now what is BOM ? A BOM is called browser object model.it is like stores info like history etc . of our webpage and we can imagine it as a soil of that tree and the windows is can called as the whole enviornment which hold BOM and DOM inside it .

    //selecting element of html in JS :
    Now there are top five methods to select element and we can store is as a variable . 
    getElementbyId : It is used to select element of HTML by ID .example:
    let button = document.getElementbyId("button1");

    getElementbyClassName: select element by class name .
    let button = document.getElementbyClassName("button");

    getElementbyTagName: select element by tag name .
    let div = document.getElementbyTagName("div");

    //querySelector : it select the first element if there is multiple elements of same name . 
    let div = document.querySelector("div);// select the first div of the document

    //querySelectorAll : select all element with same name . 
    let div = document.querySelectorAll("div);

    //manipulating text ,attributes and styles 
    // there is three methods to acess the text inside element :
    1.innerHTML: display inside text and tag name(if it has child elements).
    2.innerText : display text only skip the tag name
    3.textContent: same as innerText but it is faster . 
        manipulating the text  :
        let div = document.querySelector("div");
        div.innerText = div.innerText + " hello!world";
        div.innerHTML = <i>hello!world</i>
    set,get and remove attribute:
    get attribute is used to get the attribute of HTML tag for example:
    console.log(div.getAttribute("class")); // return the class name of selected div element
    console.log(div.removeAttribute("class")); // remove the class attribute from selected div element
    console.log(div.setAttribute("class","class1")); it take two argument first is the attributename and second attribute value; 

    //traversing through elements 
    console.log(div.parentElement()) //return the parentElement of the selected element . 
    console.log(div.child()) //return the childElement of the selected element . 
    console.log(div.firstChild()) //return the firstchild Element of the selected element . 
    console.log(div.lastChild()) //return the firstchild Element of the selected element . 
    console.log(div.removeChild("childName")) //return the firstchild Element of the selected element . 

    //style manipulation : use to update style properties dynamically in JS .
    we use element.style.property Syntax to define/change style property of element.but remember property name is defined in camel case format:
    div.style.backgroundColor = "red";

    //classList is a method used to add,remove toggle etc. a class . in a element.
    div.classList.add("class2"); // add the class2 in div's class attribute. 
    div.classList.remove("class2"); // remove the class2 in div's class attribute. 
    div.classList.toggle("class2"); // add if exist and remove id does not exist .

    // Creating and inserting elements : we can create and add(att specific location) element dynamically in JS . 
    let newElement = document.createElement("div"); //create a div element
    newElement.id  = "div1"; // gives an id to that created element.
    document.body.append(newElement); //add element at the end of the given element
    document.body.prepend(newElement); //add element at the starting of the given element
    document.body.before(newElement); //add element before of the given element
    document.body.after(newElement); //add element at the after of the given element
    
    // we also clone an element using cloneNode(true/false).Example:
    newDiv = div.cloneNode(true); // true is used to clone with child elements and false is used only for the element


Section 5 : Event Handling .
    add and remove event listener . 
    so as we selected the div element . we will going to add addEventListener.

    div.addEventListener("click",()=>{
        console.log("hello!world"); // print hello!world on click on div
    })

    Event object :it is like a list of some attributes we can say which is fired by the DOM or browser we can say (dont'know); like target,etc . so using these event object we can actully do event delegation(we can talk about it in next question !).we can see all event object using this :
    div.addEventListener("click",(event)=>{
        console.log(event);
    })

    common event :
    commonevents is the event which is fires by mouse ,keyboard etc. or we can also add form,clipboard events on it. 

    mouse events : click ,dblclick , mouseover etc .
    keyboard events : keypress, keyup,keydown,keyup.
    form events are like submit etc.
    clipboard events like cut,copy,paste etc.

    once option : using this the event is only execute one time untill we refresh our page . 

    div.addEventListener("click",()=>{
        console.log("hey");
    }{once:true});

    event delegation : it is used to handle multiple event at same time :
    using events objects we can find multiple similarities of event objects and using those similarities we can handle multiple events in a single event listener . 

    lets suppose we have some child elemets on selected div elements by default if we add event listener to the selected div element even we click on selected div's child the event object is fires attribute that we click on selected div . so prevent this we can do:
    document.body.addEventListener("click",()=>{
        if (event.target = "child"){
            console.log("you clicked on childElement")
        }else{
            console.log("You click on div");
        }
    })